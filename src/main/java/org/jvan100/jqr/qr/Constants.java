package org.jvan100.jqr.qr;

public abstract class Constants {

    public static final String MODE_INDICATOR = "0100";

    public static abstract class CharacterCapacities {

        // 0-indexed not 1-indexed
        private static final int[] L = {17, 32, 53, 78, 106, 134, 154, 192, 230, 271, 321, 367, 425, 458, 520, 586, 644, 718, 792, 858, 929, 1003, 1091, 1171, 1273, 1367, 1465, 1528, 1628, 1732, 1840, 1952, 2068, 2188, 2303, 2431, 2563, 2699, 2809, 2953};

        private static final int[] M = {14, 26, 42, 62, 84, 106, 122, 152, 180, 213, 251, 287, 331, 362, 412, 450, 504, 560, 624, 666, 711, 779, 857, 911, 997, 1059, 1125, 1190, 1264, 1370, 1452, 1538, 1628, 1722, 1809, 1911, 1989, 2099, 2213, 2331};

        private static final int[] Q = {11, 20, 32, 46, 60, 74, 86, 108, 130, 151, 177, 203, 241, 258, 292, 322, 364, 394, 442, 482, 509, 565, 611, 661, 715, 751, 805, 868, 908, 982, 1030, 1112, 1168, 1228, 1283, 1351, 1423, 1499, 1579, 1663};

        private static final int[] H = {7, 14, 24, 34, 44, 58, 64, 84, 98, 119, 137, 155, 177, 194, 220, 250, 280, 310, 338, 382, 403, 439, 461, 511, 535, 593, 625, 658, 698, 742, 790, 842, 898, 958, 983, 1051, 1093, 1139, 1219, 1273};

        public static int[] getCharacterCapacities(Level level) {
            switch (level) {
                case L:
                    return L;
                case M:
                    return M;
                case Q:
                    return Q;
                case H:
                    return H;
            }

            throw new AssertionError("Error correction level must have value of either L, M, Q, or H.");
        }

    }

    public static abstract class CodewordsData {

        private static final Data[] L = {
                new Data(1, 19, 0, 0, 19, 7),
                new Data(1, 34, 0, 0, 34, 10),
                new Data(1, 55, 0, 0, 55, 15),
                new Data(1, 80, 0, 0, 80, 20),
                new Data(1, 108, 0, 0, 108, 26),
                new Data(2, 68, 0, 0, 136, 18),
                new Data(2, 78, 0, 0, 156, 20),
                new Data(2, 97, 0, 0, 194, 24),
                new Data(2, 116, 0, 0, 232, 30),
                new Data(2, 68, 2, 69, 274, 18),
                new Data(4, 81, 0, 0, 324, 20),
                new Data(2, 92, 2, 93, 370, 24),
                new Data(4, 107, 0, 0, 428, 26),
                new Data(3, 115, 1, 116, 461, 30),
                new Data(5, 87, 1, 88, 523, 22)
        };

        private static final Data[] M = {
                new Data(1, 16, 0, 0, 16, 10),
                new Data(1, 28, 0, 0, 28, 16),
                new Data(1, 44, 0, 0, 44, 26),
                new Data(2, 32, 0, 0, 64, 18),
                new Data(2, 43, 0, 0, 86, 24),
                new Data(4, 27, 0, 0, 108, 16),
                new Data(4, 31, 0, 0, 124, 18),
                new Data(2, 38, 2, 39, 154, 22),
                new Data(3, 36, 2, 37, 182, 22),
                new Data(4, 43, 1, 44, 216, 26),
                new Data(1, 50, 4, 51, 254, 30),
                new Data(6, 36, 2, 37, 290, 22),
                new Data(8, 37, 1, 38, 334, 22),
                new Data(4, 40, 5, 41, 365, 24),
                new Data(5, 41, 5, 42, 415, 24)
        };

        private static final Data[] Q = {
                new Data(1, 13, 0, 0, 13, 13),
                new Data(1, 22, 0, 0, 22, 22),
                new Data(2, 17, 0, 0, 34, 18),
                new Data(2, 24, 0, 0, 48, 26),
                new Data(2, 15, 2, 16, 62, 18),
                new Data(4, 19, 0, 0, 76, 24),
                new Data(2, 14, 4, 15, 88, 18),
                new Data(4, 18, 2, 19, 110, 22),
                new Data(4, 16, 4, 17, 132, 20),
                new Data(6, 19, 2, 20, 154, 24),
                new Data(4, 22, 4, 23, 180, 28),
                new Data(4, 20, 6, 21, 206, 26),
                new Data(8, 20, 4, 21, 244, 24),
                new Data(11, 16, 5, 17, 261, 20),
                new Data(5, 24, 7, 25, 295, 30)
        };

        private static final Data[] H = {
                new Data(1, 9, 0, 0, 9, 17),
                new Data(1, 16, 0, 0, 16, 28),
                new Data(2, 13, 0, 0, 26, 22),
                new Data(4, 9, 0, 0, 36, 16),
                new Data(2, 11, 2, 12, 46, 22),
                new Data(4, 15, 0, 0, 60, 28),
                new Data(4, 13, 1, 14, 66, 26),
                new Data(4, 14, 2, 15, 86, 26),
                new Data(4, 12, 4, 13, 100, 24),
                new Data(6, 15, 2, 16, 122, 28),
                new Data(3, 12, 8, 13, 140, 24),
                new Data(7, 14, 4, 15, 158, 28),
                new Data(12, 11, 4, 12, 180, 22),
                new Data(11, 12, 5, 13, 197, 24),
                new Data(11, 12, 7, 13, 223, 24)
        };

        public static Data[] getCodewordsData(Level level) {
            switch (level) {
                case L:
                    return L;
                case M:
                    return M;
                case Q:
                    return Q;
                case H:
                    return H;
            }

            throw new AssertionError("Error correction level must have value of either L, M, Q, or H.");
        }

    }

    public static class Data {

        private final int group1Blocks;
        private final int group1CodewordsPerBlock;
        private final int group2Blocks;
        private final int group2CodewordsPerBlock;
        private final int total;
        private final int ECCodewords;

        public Data(int group1Blocks, int group1CodewordsPerBlock, int group2Blocks, int group2CodewordsPerBlock, int total, int ECCodewords) {
            this.group1Blocks = group1Blocks;
            this.group1CodewordsPerBlock = group1CodewordsPerBlock;
            this.group2Blocks = group2Blocks;
            this.group2CodewordsPerBlock = group2CodewordsPerBlock;
            this.total = total;
            this.ECCodewords = ECCodewords;
        }

        public int getGroup1Blocks() {
            return group1Blocks;
        }

        public int getGroup1CodewordsPerBlock() {
            return group1CodewordsPerBlock;
        }

        public int getGroup2Blocks() {
            return group2Blocks;
        }

        public int getGroup2CodewordsPerBlock() {
            return group2CodewordsPerBlock;
        }

        public int getTotal() {
            return total;
        }

        public int getECCodewords() {
            return ECCodewords;
        }

        @Override
        public String toString() {
            return "Group 1 blocks: " + group1Blocks + "\n" + "Codewords in each group 1 block: " + group1CodewordsPerBlock + "\n\n" + "Group 2 blocks: " + group2Blocks + "\n" + "Codewords in each group 2 block: " + group2CodewordsPerBlock + "\n\n" + "Total data codewords: " + total + "\n\n" + "Error correction codewords per block: " + ECCodewords + "\n";
        }
    }

    public static final String[] PAD_BYTES = {"11101100", "00010001"};

    public static final int[] LOG = {1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142, 1};

    public static final int[] ANTILOG = {0, 255, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4, 100, 224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113, 5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130, 69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228, 114, 166, 6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16, 145, 34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19, 92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58, 40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78, 212, 229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 140, 128, 99, 13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38, 184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91, 149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80, 88, 175};

    public static final int[] REMAINDER_BITS = {0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0};

    public static final int[][] ALIGNMENT_LOCATIONS = {{6, 18}, {6, 22}, {6, 26}, {6, 30}, {6, 34}, {6, 22, 38}, {6, 24, 42}, {6, 26, 46}, {6, 28, 50}, {6, 30, 54}, {6, 32, 58}, {6, 34, 62}, {6, 26, 46, 66}, {6, 26, 48, 70}, {6, 26, 50, 74}, {6, 30, 54, 78}, {6, 30, 56, 82}, {6, 30, 58, 86}, {6, 34, 62, 90}, {6, 28, 50, 72, 94}, {6, 26, 50, 74, 98}, {6, 30, 54, 78, 102}, {6, 28, 54, 80, 106}, {6, 32, 58, 84, 110}, {6, 30, 58, 86, 114}, {6, 34, 62, 90, 118}, {6, 26, 50, 74, 98, 122}, {6, 30, 54, 78, 102, 126}, {6, 26, 52, 78, 104, 130}, {6, 30, 56, 82, 108, 134}, {6, 34, 60, 86, 112, 138}, {6, 30, 58, 86, 114, 142}, {6, 34, 62, 90, 118, 146}, {6, 30, 54, 78, 102, 126, 150}, {6, 24, 50, 76, 102, 128, 154}, {6, 28, 54, 80, 106, 132, 158}, {6, 32, 58, 84, 110, 136, 162}, {6, 26, 54, 82, 110, 138, 166}, {6, 30, 58, 86, 114, 142, 170}};

    public static final byte EMPTY = 0;
    public static final byte PATTERN_DARK = 1;
    public static final byte PATTERN_LIGHT = 2;
    public static final byte RESERVED = 3;
    public static final byte DATA_DARK = 4;
    public static final byte DATA_LIGHT = 5;

    public static abstract class FormatInfo {

        private static final byte[][] L = {{4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 5, 5, 4, 5, 5}, {4, 4, 4, 5, 5, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4}, {4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 5, 4, 5, 4, 5}, {4, 4, 4, 4, 5, 5, 5, 4, 5, 5, 4, 4, 4, 5, 4}, {4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 5, 4, 4, 4, 4}, {4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5}, {4, 4, 5, 4, 4, 5, 5, 5, 4, 5, 5, 5, 5, 5, 4}, {4, 4, 5, 4, 5, 5, 4, 5, 4, 4, 4, 5, 4, 4, 5}};

        private static final byte[][] M = {{4, 5, 4, 5, 4, 5, 5, 5, 5, 5, 4, 5, 5, 4, 5}, {4, 5, 4, 5, 5, 5, 4, 5, 5, 4, 5, 5, 4, 5, 4}, {4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 5, 5}, {4, 5, 4, 4, 5, 4, 4, 5, 4, 5, 5, 4, 5, 4, 4}, {4, 5, 5, 5, 4, 5, 4, 4, 4, 4, 4, 4, 5, 5, 4}, {4, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 4, 4, 4, 5}, {4, 5, 5, 4, 4, 4, 4, 4, 5, 5, 4, 5, 4, 4, 4}, {4, 5, 5, 4, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 5}};

        private static final byte[][] Q = {{5, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 4, 4, 4}, {5, 4, 4, 5, 5, 5, 5, 5, 4, 4, 5, 4, 5, 5, 5}, {5, 4, 4, 4, 4, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4}, {5, 4, 4, 4, 5, 4, 5, 5, 5, 5, 5, 5, 4, 4, 5}, {5, 4, 5, 5, 4, 5, 5, 4, 5, 4, 4, 5, 4, 5, 5}, {5, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 4}, {5, 4, 5, 4, 4, 4, 5, 4, 4, 5, 4, 4, 5, 4, 5}, {5, 4, 5, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4}};

        private static final byte[][] H = {{5, 5, 4, 5, 4, 4, 5, 4, 5, 5, 5, 4, 5, 5, 4}, {5, 5, 4, 5, 5, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5}, {5, 5, 4, 4, 4, 5, 5, 4, 4, 4, 5, 5, 4, 4, 4}, {5, 5, 4, 4, 5, 5, 4, 4, 4, 5, 4, 5, 5, 5, 5}, {5, 5, 5, 5, 4, 4, 4, 5, 4, 4, 5, 5, 5, 4, 5}, {5, 5, 5, 5, 5, 4, 5, 5, 4, 5, 4, 5, 4, 5, 4}, {5, 5, 5, 4, 4, 5, 4, 5, 5, 5, 5, 4, 4, 5, 5}, {5, 5, 5, 4, 5, 5, 5, 5, 5, 4, 4, 4, 5, 4, 4}};

        public static byte[][] getFormatInfo(Level level) {
            switch (level) {
                case L:
                    return L;
                case M:
                    return M;
                case Q:
                    return Q;
                case H:
                    return H;
            }

            throw new AssertionError("Error correction level must have value of either L, M, Q, or H.");
        }

    }

    public static final byte[][] VERSION_INFO = {{5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 4, 5, 5, 4, 5, 4, 5, 5}, {5, 5, 4, 5, 5, 5, 5, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 5}, {5, 5, 4, 5, 5, 4, 4, 5, 4, 5, 4, 5, 5, 4, 4, 5, 5, 4}, {5, 5, 4, 5, 4, 5, 5, 4, 5, 5, 4, 4, 5, 4, 5, 5, 4, 4}, {5, 5, 4, 5, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5}, {5, 5, 4, 4, 5, 5, 5, 4, 4, 4, 5, 4, 4, 5, 5, 5, 4, 5}, {5, 5, 4, 4, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 4, 4, 4}, {5, 5, 4, 4, 4, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 4, 5, 4}, {5, 5, 4, 4, 4, 4, 4, 5, 5, 4, 5, 5, 4, 5, 4, 5, 5, 5}, {5, 4, 5, 5, 5, 5, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 5, 5}, {5, 4, 5, 5, 5, 4, 5, 4, 5, 5, 5, 4, 5, 4, 4, 4, 5, 4}, {5, 4, 5, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 4, 5, 4, 4, 4}, {5, 4, 5, 5, 4, 4, 5, 4, 5, 4, 5, 5, 4, 4, 5, 5, 4, 5}, {5, 4, 5, 4, 5, 5, 4, 5, 5, 4, 4, 5, 4, 5, 5, 4, 4, 5}, {5, 4, 5, 4, 5, 4, 5, 4, 4, 5, 4, 5, 5, 5, 5, 5, 4, 4}, {5, 4, 5, 4, 4, 5, 4, 5, 5, 5, 4, 4, 5, 5, 4, 5, 5, 4}, {5, 4, 5, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 5}, {5, 4, 4, 5, 5, 5, 4, 4, 4, 5, 4, 4, 5, 5, 5, 4, 5, 5}, {5, 4, 4, 5, 5, 4, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 4}, {5, 4, 4, 5, 4, 5, 4, 4, 4, 4, 4, 5, 4, 5, 4, 5, 4, 4}, {5, 4, 4, 5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 4, 4, 4, 5}, {5, 4, 4, 4, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 4, 5, 4, 5}, {5, 4, 4, 4, 5, 4, 5, 5, 4, 4, 5, 5, 4, 4, 4, 4, 4, 4}, {5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 5, 4, 4, 4, 5, 4, 5, 4}, {5, 4, 4, 4, 4, 4, 5, 5, 4, 5, 5, 4, 5, 4, 5, 5, 5, 5}, {4, 5, 5, 5, 5, 5, 4, 5, 5, 4, 4, 4, 5, 4, 5, 4, 5, 4}, {4, 5, 5, 5, 5, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 5, 5, 5}, {4, 5, 5, 5, 4, 5, 4, 5, 5, 5, 4, 5, 4, 4, 4, 5, 4, 5}, {4, 5, 5, 5, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4}, {4, 5, 5, 4, 5, 5, 4, 5, 4, 4, 5, 5, 5, 5, 4, 5, 4, 4}, {4, 5, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 4, 5, 4, 4, 4, 5}, {4, 5, 5, 4, 4, 5, 4, 5, 4, 5, 5, 4, 4, 5, 5, 4, 5, 5}, {4, 5, 5, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 5, 4}, {4, 5, 4, 5, 5, 5, 4, 4, 5, 5, 5, 4, 4, 5, 4, 5, 5, 4}};

}
